{
  "name": "GiggleGPTBot V2",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "*"
        ],
        "additionalFields": {}
      },
      "id": "58065345-2b78-46c4-8c51-584fba2acf14",
      "name": "Webhook Telegram",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1,
      "position": [
        -1536,
        224
      ],
      "webhookId": "9bbd84b8-d350-4684-8239-4e510c90f455",
      "credentials": {
        "telegramApi": {
          "id": "GNUE3W3kc9bGnXyL",
          "name": "GiggleGPTBot"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Основные таблицы\nCREATE TABLE IF NOT EXISTS user_messages (\n  id SERIAL PRIMARY KEY,\n  user_id BIGINT NOT NULL,\n  username VARCHAR(255),\n  first_name VARCHAR(255),\n  chat_id BIGINT NOT NULL,\n  message_text TEXT,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE IF NOT EXISTS bot_responses (\n  id SERIAL PRIMARY KEY,\n  user_id BIGINT NOT NULL,\n  chat_id BIGINT NOT NULL,\n  user_message TEXT,\n  bot_response TEXT,\n  response_type VARCHAR(50),\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Новые таблицы для функционала\nCREATE TABLE IF NOT EXISTS bot_commands (\n  id SERIAL PRIMARY KEY,\n  user_id BIGINT NOT NULL,\n  chat_id BIGINT NOT NULL,\n  command VARCHAR(50) NOT NULL,\n  parameters TEXT,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE IF NOT EXISTS message_reactions (\n  id SERIAL PRIMARY KEY,\n  message_id BIGINT NOT NULL,\n  chat_id BIGINT NOT NULL,\n  user_id BIGINT NOT NULL,\n  emoji VARCHAR(10),\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE IF NOT EXISTS scheduled_posts (\n  id SERIAL PRIMARY KEY,\n  chat_id BIGINT NOT NULL,\n  message_text TEXT,\n  post_type VARCHAR(50),\n  scheduled_time TIME,\n  is_active BOOLEAN DEFAULT true,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE user_stats (\n  user_id BIGINT NOT NULL,\n  chat_id BIGINT NOT NULL,\n  messages_count INT DEFAULT 0,\n  commands_count INT DEFAULT 0,\n  reactions_received INT DEFAULT 0,\n  last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  PRIMARY KEY (user_id, chat_id)  -- Составной первичный ключ\n);\n\n-- Индексы\nCREATE INDEX IF NOT EXISTS idx_user_messages_chat_user ON user_messages(chat_id, user_id);\nCREATE INDEX IF NOT EXISTS idx_bot_responses_chat_user ON bot_responses(chat_id, user_id);\nCREATE INDEX IF NOT EXISTS idx_commands_user ON bot_commands(user_id, command);\nCREATE INDEX IF NOT EXISTS idx_reactions_message ON message_reactions(message_id);\nCREATE INDEX idx_user_stats_activity ON user_stats(last_activity DESC);\nCREATE INDEX idx_user_stats_messages ON user_stats(messages_count DESC);\n",
        "options": {}
      },
      "id": "5a93b7b4-233d-4e7d-b78a-560abbd06c07",
      "name": "Инициализация Enhanced БД",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -1536,
        48
      ],
      "credentials": {
        "postgres": {
          "id": "Fd7RaI9MHHQBq9hE",
          "name": "Supabase Postgres"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO user_messages (user_id, username, first_name, chat_id, message_text) \nVALUES ({{ $('Webhook Telegram').item.json.message.from.id }}, \n        '{{ ($('Webhook Telegram').item.json.message.from.username || '').replace(/'/g, \"''\") }}', \n        '{{ ($('Webhook Telegram').item.json.message.from.first_name || '').replace(/'/g, \"''\") }}', \n        {{ $('Webhook Telegram').item.json.message.chat.id }}, \n        '{{ ($('Webhook Telegram').item.json.message.text || '').replace(/'/g, \"''\") }}');\n\n-- Обновляем статистику пользователя (теперь с правильным constraint)\nINSERT INTO user_stats (user_id, chat_id, messages_count, last_activity)\nVALUES ({{ $('Webhook Telegram').item.json.message.from.id }}, \n        {{ $('Webhook Telegram').item.json.message.chat.id }}, \n        1, CURRENT_TIMESTAMP)\nON CONFLICT (user_id, chat_id) \nDO UPDATE SET \n  messages_count = user_stats.messages_count + 1,\n  last_activity = CURRENT_TIMESTAMP;",
        "options": {}
      },
      "id": "e5369ae1-6baf-4253-831c-e0034187a833",
      "name": "Логировать сообщение + статистика",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -1280,
        64
      ],
      "credentials": {
        "postgres": {
          "id": "Fd7RaI9MHHQBq9hE",
          "name": "Supabase Postgres"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $json.message?.text }}",
              "rightValue": "/",
              "operator": {
                "type": "string",
                "operation": "startsWith",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "fa35a2bc-84d8-49a2-b398-c55abd29a10f",
      "name": "Это команда?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -1104,
        224
      ]
    },
    {
      "parameters": {
        "jsCode": "const telegramData = $('Webhook Telegram').first().json;\nconst messageText = telegramData.message.text;\nconst userId = telegramData.message.from.id;\nconst chatId = telegramData.message.chat.id;\nconst userName = telegramData.message.from.first_name || telegramData.message.from.username;\n\n// Парсим команду\nconst commandMatch = messageText.match(/^\\/(\\w+)(?:@\\w+)?(?:\\s+(.*))?/);\nconst command = commandMatch ? commandMatch[1].toLowerCase() : '';\nconst parameters = commandMatch ? (commandMatch[2] || '') : '';\n\n// Определяем тип команды\nlet commandType = 'unknown';\nlet responseType = 'mixed';\n\nswitch(command) {\n  case 'joke':\n    commandType = 'joke';\n    responseType = 'funny';\n    break;\n  case 'inspire':\n    commandType = 'inspire';\n    responseType = 'inspiring';\n    break;\n  case 'random':\n    commandType = 'random';\n    responseType = 'mixed';\n    break;\n  case 'stats':\n    commandType = 'stats';\n    responseType = 'info';\n    break;\n  case 'top':\n    commandType = 'top';\n    responseType = 'info';\n    break;\n  case 'help':\n    commandType = 'help';\n    responseType = 'info';\n    break;\n  case 'schedule':\n    commandType = 'schedule';\n    responseType = 'admin';\n    break;\n  default:\n    commandType = 'unknown';\n}\n\n// Время дня\nconst now = new Date();\nconst hour = now.getHours();\nlet timeContext = '';\nif (hour < 6) timeContext = 'ночь';\nelse if (hour < 12) timeContext = 'утро';\nelse if (hour < 18) timeContext = 'день';\nelse timeContext = 'вечер';\n\nreturn [{\n  json: {\n    userId,\n    userName,\n    chatId,\n    command,\n    commandType,\n    parameters,\n    responseType,\n    timeContext,\n    originalMessage: messageText,\n    chatType: telegramData.message.chat.type\n  }\n}];"
      },
      "id": "122cf278-a356-4e16-90b5-8269b7d8f785",
      "name": "Парсинг команды",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -880,
        64
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO bot_commands (user_id, chat_id, command, parameters) \nVALUES ({{ $json.userId }}, {{ $json.chatId }}, '{{ $json.command }}', '{{ $json.parameters.replace(/'/g, \"''\") }}');\n\n-- Обновляем статистику команд\nUPDATE user_stats \nSET commands_count = commands_count + 1 \nWHERE user_id = {{ $json.userId }} AND chat_id = {{ $json.chatId }};",
        "options": {}
      },
      "id": "1f2c07df-05f2-4e63-ac85-82211e5bfd98",
      "name": "Логировать команду",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -656,
        64
      ],
      "credentials": {
        "postgres": {
          "id": "Fd7RaI9MHHQBq9hE",
          "name": "Supabase Postgres"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  us.user_id,\n  us.messages_count,\n  us.commands_count,\n  0 as reactions_received,\n  us.last_activity,\n  (SELECT COUNT(*) FROM bot_responses br WHERE br.user_id = us.user_id AND br.chat_id = us.chat_id) as responses_count\nFROM user_stats us\nWHERE us.chat_id = {{ $('Парсинг команды').item.json.chatId }}\n  AND us.user_id = {{ $('Парсинг команды').item.json.userId }}\nLIMIT 1;",
        "options": {}
      },
      "id": "70b030a8-0f10-4d43-99a3-7db7c0e8ee57",
      "name": "Получить статистику пользователя",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -208,
        -368
      ],
      "credentials": {
        "postgres": {
          "id": "Fd7RaI9MHHQBq9hE",
          "name": "Supabase Postgres"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  us.messages_count,\n  us.commands_count,\n  CONCAT(\n    COALESCE((SELECT first_name FROM user_messages WHERE user_id = us.user_id LIMIT 1), 'Пользователь'),\n    ' (@',\n    COALESCE((SELECT username FROM user_messages WHERE user_id = us.user_id LIMIT 1), 'no_username'),\n    ')'\n  ) as user_name\nFROM user_stats us\nWHERE us.chat_id = {{ $('Парсинг команды').item.json.chatId }}\n  AND us.messages_count > 0\nORDER BY (us.messages_count + us.commands_count * 2) DESC\nLIMIT 10;",
        "options": {}
      },
      "id": "d0b2dc76-4643-41b0-a1ae-ca1c6a559015",
      "name": "Получить топ пользователей",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -208,
        -176
      ],
      "credentials": {
        "postgres": {
          "id": "Fd7RaI9MHHQBq9hE",
          "name": "Supabase Postgres"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// ИСПРАВЛЕННЫЙ КОД для ноды \"Генерация информационного ответа\"\n\nconst commandData = $('Парсинг команды').first().json;\n\n// Безопасное получение данных - проверяем существование\nlet userStatsData = $input.first();\nlet topUsersData = [];\n\ntry {\n  // Пытаемся получить данные топа\n  const topNode = $('Получить топ пользователей');\n  if (topNode && topNode.all) {\n    topUsersData = topNode.all();\n  }\n} catch (error) {\n  console.log('Топ пользователей недоступен:', error.message);\n}\n\nlet responseText = '';\n\nswitch(commandData.commandType) {\n  case 'stats':\n    if (userStatsData !== undefined) {\n      const userStats = userStatsData.json;\n      responseText = `📊 Статистика ${commandData.userName}:\\n` +\n        `💬 Сообщений: ${userStats.messages_count || 0}\\n` +\n        `⚡ Команд: ${userStats.commands_count || 0}\\n` +\n        `📅 Последняя активность: ${userStats.last_activity ? new Date(userStats.last_activity).toLocaleString('ru-RU') : 'Неизвестно'}`;\n    } else {\n      responseText = `📊 Статистика ${commandData.userName}:\\n` +\n        `Пока нет данных. Продолжайте общаться! 💬`;\n    }\n    break;\n    \n  case 'top':\n    if (topUsersData.length > 0) {\n      responseText = '🏆 Топ активных пользователей:\\n\\n';\n      topUsersData.forEach((user, index) => {\n        const userData = user.json;\n        const total = (userData.messages_count || 0) + (userData.commands_count || 0) * 2;\n        responseText += `${index + 1}. ${userData.user_name || 'Пользователь'}\\n`;\n        responseText += `   💬 ${userData.messages_count || 0} сообщений, ⚡ ${userData.commands_count || 0} команд\\n`;\n        responseText += `   📊 Активность: ${total} очков\\n\\n`;\n      });\n    } else {\n      responseText = '🏆 Топ активных пользователей:\\n\\n' +\n        'Пока нет активных пользователей в этом чате! Будьте первыми! 🚀';\n    }\n    break;\n    \n  case 'help':\n    responseText = '🤖 Команды GiggleGPTBot:\\n\\n' +\n      '😄 /joke - смешная шутка\\n' +\n      '💪 /inspire - мотивация\\n' +\n      '🎲 /random - случайная фраза\\n' +\n      '📊 /stats - твоя статистика\\n' +\n      '🏆 /top - топ пользователей\\n' +\n      '❓ /help - эта справка\\n\\n' +\n      'Также можно писать @GiggleGPTBot + текст для персонального ответа!';\n    break;\n    \n  default:\n    responseText = 'Неизвестная команда 🤔 Используй /help для списка команд.';\n}\n\nreturn [{\n  json: {\n    userId: commandData.userId,\n    userName: commandData.userName,\n    chatId: commandData.chatId,\n    command: commandData.command,\n    commandType: commandData.commandType,\n    responseType: commandData.responseType,\n    timeContext: commandData.timeContext,\n    originalMessage: commandData.originalMessage,\n    chatType: commandData.chatType,\n    responseText: responseText,\n    isInfoCommand: true\n  }\n}];"
      },
      "id": "ace02b27-ee09-4fe2-b55d-ed5cc406e54a",
      "name": "Генерация информационного ответа",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        32,
        -16
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Команда: /{{ $('Парсинг команды').item.json.command }}\nПользователь: {{ $('Парсинг команды').item.json.userName }}\nПараметры: {{ $('Парсинг команды').item.json.parameters }}\nТип ответа: {{ $('Парсинг команды').item.json.responseType }}\nВремя: {{ $('Парсинг команды').item.json.timeContext }}\n\nСгенерируй {{ $json.responseType === 'funny' ? 'смешную шутку' : $json.responseType === 'inspiring' ? 'мотивирующую фразу' : 'случайную интересную фразу' }} в твоем фирменном стиле с тонким юмором и изящными подколками.",
        "options": {
          "systemMessage": "Ты GiggleGPTBot - остроумный бот с тонким чувством юмора и мастерством изящных подколок.\n\nОтвечаешь на команды:\n- /joke - умная шутка с тонким юмором\n- /inspire - мотивация с легкой иронией \n- /random - неожиданная остроумная фраза\n\nСтиль: краткость, изящество, умные подколки без грубости. Используй эмодзи для выразительности."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -320,
        144
      ],
      "id": "1c0b7f91-b147-44a6-b729-3cea5834a8e5",
      "name": "AI ответ на команду"
    },
    {
      "parameters": {
        "model": "openai/gpt-oss-20b:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -640,
        832
      ],
      "id": "3a420d16-9611-4761-b41a-97fda73abb56",
      "name": "OpenRouter Commands",
      "credentials": {
        "openRouterApi": {
          "id": "ONSHmBroionT6JFr",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $json.isInfoCommand }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal",
                "singleValue": true
              }
            },
            {
              "id": "78352c71-3779-4ba9-afb7-1e836a019a24",
              "leftValue": "={{ $json.responseText }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "1dbf5bd9-87ee-44dd-bc22-d5649bf85e2a",
      "name": "Тип ответа",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        224,
        112
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "={{ $json.responseText }}",
        "additionalFields": {}
      },
      "id": "56b0ee68-7a89-4bb2-844c-25a47356e053",
      "name": "Отправить инфо ответ",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        448,
        32
      ],
      "webhookId": "4f20c973-3a64-41ca-9f50-9b9e3c6b13a3",
      "credentials": {
        "telegramApi": {
          "id": "GNUE3W3kc9bGnXyL",
          "name": "GiggleGPTBot"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Парсинг команды').item.json.chatId }}",
        "text": "={{ $json.output }}",
        "additionalFields": {}
      },
      "id": "417d0505-e3e1-4feb-ba48-de3ccc1be3d5",
      "name": "Отправить AI ответ",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        448,
        224
      ],
      "webhookId": "1ccf329c-ecb1-4f44-b483-e00af8b7a081",
      "credentials": {
        "telegramApi": {
          "id": "GNUE3W3kc9bGnXyL",
          "name": "GiggleGPTBot"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $json.message?.text }}",
              "rightValue": "@GiggleGPTBot",
              "operator": {
                "type": "string",
                "operation": "contains",
                "singleValue": true
              }
            },
            {
              "id": "251b4c51-cdf9-4124-b37b-003eb968a06f",
              "leftValue": "={{ $json.message?.text }}",
              "rightValue": "/",
              "operator": {
                "type": "string",
                "operation": "notStartsWith"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "bf244b7f-9280-4126-bc37-9696507014db",
      "name": "Упоминание бота?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -1104,
        384
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT message_text, username, first_name, created_at \nFROM user_messages \nWHERE chat_id = {{ $('Webhook Telegram').item.json.message.chat.id }} \nORDER BY created_at DESC \nLIMIT 20;",
        "options": {}
      },
      "id": "edb50be1-307b-4ce8-bb57-00651f2d4a11",
      "name": "История чата",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -880,
        384
      ],
      "credentials": {
        "postgres": {
          "id": "Fd7RaI9MHHQBq9hE",
          "name": "Supabase Postgres"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const telegramData = $('Webhook Telegram').first().json;\nconst chatHistory = $('История чата').all();\n\n// Извлекаем информацию о пользователе\nconst userId = telegramData.message.from.id;\nconst userName = telegramData.message.from.first_name || telegramData.message.from.username || 'Анонимный';\nlet userMessage = telegramData.message.text;\nconst chatId = telegramData.message.chat.id;\n\n// Очищаем от тега\nconst originalMessage = userMessage;\nuserMessage = userMessage.replace(/@GiggleGPTBot/gi, '').trim();\nconst isEmptyAfterTag = !userMessage || userMessage.length === 0;\n\n// Контекст чата\nconst recentMessages = chatHistory.map(item => {\n  const msgText = item.json.message_text || '';\n  const author = item.json.first_name || item.json.username || 'Анонимный';\n  return `${author}: ${msgText}`;\n}).slice(0, 10).join('\\n');\n\n// Определяем тип\nlet contentType = 'mixed';\nconst lowerMessage = userMessage.toLowerCase();\nif (lowerMessage.includes('шутк') || lowerMessage.includes('смешн')) {\n  contentType = 'funny';\n} else if (lowerMessage.includes('вдохнов') || lowerMessage.includes('мотив')) {\n  contentType = 'inspiring';\n}\n\nif (isEmptyAfterTag) {\n  const types = ['funny', 'inspiring', 'mixed'];\n  contentType = types[Math.floor(Math.random() * types.length)];\n}\n\n// Время\nconst now = new Date();\nnow.setHours(now.getHours() + 3); // прибавляем 3 часа\nconst hour = now.getHours();\nlet timeContext = '';\nif (hour < 6) timeContext = 'ночь';\nelse if (hour < 12) timeContext = 'утро';\nelse if (hour < 18) timeContext = 'день';\nelse timeContext = 'вечер';\n\nreturn [{\n  json: {\n    userId,\n    userName,\n    userMessage: isEmptyAfterTag ? 'Случайная фраза' : userMessage,\n    originalMessage,\n    chatId,\n    contentType,\n    timeContext,\n    recentMessages,\n    chatType: telegramData.message.chat.type,\n    isRandomRequest: isEmptyAfterTag\n  }\n}];"
      },
      "id": "f3d8ffb2-c135-4b1e-8bba-e820fce43e9b",
      "name": "Анализ упоминания",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -656,
        384
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Пользователь: {{ $json.userName }}\n{{ $json.isRandomRequest ? 'Обратился тегом без текста' : 'Сообщение: \"' + $json.userMessage + '\"' }}\n\nКонтекст чата:\n{{ $json.recentMessages }}\n\nВремя: {{ $json.timeContext }} | Стиль: {{ $json.contentType }}\n\n{{ $json.isRandomRequest ? 'Прокомментируй ситуацию в чате остроумно.' : 'Ответь на сообщение с тонким юмором.' }}\n\nБудь остроумным и тактичным! 🎭",
        "options": {
          "systemMessage": "Ты GiggleGPTBot - остроумный бот с тонким чувством юмора и изящными подколками.\n\nСтиль: краткие ответы (1-2 предложения), умные наблюдения, легкая ирония, культурные отсылки.\n\nИзбегай: грубости, агрессивного сарказма, длинных текстов.\n\nИспользуй эмодзи для выразительности."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -464,
        464
      ],
      "id": "797a7e58-e484-4042-b925-08ccc03bd2d3",
      "name": "AI ответ на упоминание"
    },
    {
      "parameters": {
        "chatId": "={{ $('Анализ упоминания').item.json.chatId }}",
        "text": "={{ $json.output }}",
        "additionalFields": {
          "reply_to_message_id": "={{ $('Webhook Telegram').first().json.message.message_id }}"
        }
      },
      "id": "3b5d0fea-5d38-4d5e-a585-d74fb6a4ab33",
      "name": "Отправить ответ на упоминание",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        -80,
        432
      ],
      "webhookId": "03496589-cd63-4249-a5b5-eff8fec21592",
      "credentials": {
        "telegramApi": {
          "id": "GNUE3W3kc9bGnXyL",
          "name": "GiggleGPTBot"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT chat_id, post_type \nFROM scheduled_posts \nWHERE is_active = true \nAND EXTRACT(HOUR FROM scheduled_time) = EXTRACT(HOUR FROM CURRENT_TIME);",
        "options": {}
      },
      "id": "fd5d8aab-fad8-4898-83d9-37bd19653df3",
      "name": "Получить запланированные посты",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -1328,
        624
      ],
      "credentials": {
        "postgres": {
          "id": "Fd7RaI9MHHQBq9hE",
          "name": "Supabase Postgres"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Тип поста: {{ $json.post_type }}\n\nСгенерируй {{ $json.post_type === 'morning_joke' ? 'утреннюю шутку' : $json.post_type === 'daily_motivation' ? 'мотивацию на день' : 'интересную фразу' }} в твоем стиле с тонким юмором.",
        "options": {
          "systemMessage": "ВАЖНО: Отвечай ТОЛЬКО простым текстом! \nНЕ используй звездочки, подчеркивания, специальные кавычки или символы форматирования!\n\nТы GiggleGPTBot. Генерируешь запланированные посты для каналов:\n- morning_joke: утренние шутки с легкой иронией\n- daily_motivation: мотивация с долей юмора\n- random_wisdom: неожиданные наблюдения о жизни\n\nСтиль: краткость, остроумие, позитив с ноткой иронии."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -1104,
        624
      ],
      "id": "c8fc55a5-c357-4421-8601-fa28a69e71f4",
      "name": "AI генерация поста"
    },
    {
      "parameters": {
        "chatId": "={{ $('Получить запланированные посты').item.json.chat_id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {}
      },
      "id": "05c531f3-9b72-4028-822c-08003212f410",
      "name": "Отправить запланированный пост",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        -784,
        624
      ],
      "webhookId": "4ac5eeba-a239-4d33-979b-c5a9adb33e4e",
      "credentials": {
        "telegramApi": {
          "id": "GNUE3W3kc9bGnXyL",
          "name": "GiggleGPTBot"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Парсинг команды').item.json.commandType }}",
                    "rightValue": "stats",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "995c6bf3-f7c9-4589-ba6b-181d8f0339fc"
                  }
                ],
                "combinator": "or"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "adf626b1-fdfc-4ef3-802a-5aabf79694e3",
                    "leftValue": "={{ $('Парсинг команды').item.json.commandType }}",
                    "rightValue": "top",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "or"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "5e0f6d12-ca1c-4ab2-bb2e-f7937265274b",
                    "leftValue": "={{ $('Парсинг команды').item.json.commandType }}",
                    "rightValue": "help",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "or"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "849512c4-bfe7-4624-bcb0-8c76b69fb0a3",
      "name": "Роутинг команд",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        -496,
        -160
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 * * * *"
            }
          ]
        }
      },
      "id": "defd23c5-c0c1-4686-900b-cc21fffdf4f2",
      "name": "Расписание",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [
        -1536,
        624
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO scheduled_posts (chat_id, post_type, scheduled_time) VALUES\n(-1001111111, 'random_wisdom', '16:00:00'),\n(-1002222222, 'daily_news', '09:00:00');",
        "options": {}
      },
      "id": "e1e9f133-b50c-49cb-b9fb-25cf90896926",
      "name": "Добавление расписания",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -1536,
        448
      ],
      "credentials": {
        "postgres": {
          "id": "Fd7RaI9MHHQBq9hE",
          "name": "Supabase Postgres"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Telegram": {
      "main": [
        [
          {
            "node": "Логировать сообщение + статистика",
            "type": "main",
            "index": 0
          },
          {
            "node": "Это команда?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Упоминание бота?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Это команда?": {
      "main": [
        [
          {
            "node": "Парсинг команды",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Парсинг команды": {
      "main": [
        [
          {
            "node": "Логировать команду",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Логировать команду": {
      "main": [
        [
          {
            "node": "Роутинг команд",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Получить статистику пользователя": {
      "main": [
        [
          {
            "node": "Генерация информационного ответа",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Получить топ пользователей": {
      "main": [
        [
          {
            "node": "Генерация информационного ответа",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Генерация информационного ответа": {
      "main": [
        [
          {
            "node": "Тип ответа",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI ответ на команду": {
      "main": [
        [
          {
            "node": "Тип ответа",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Тип ответа": {
      "main": [
        [
          {
            "node": "Отправить инфо ответ",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Отправить AI ответ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Commands": {
      "ai_languageModel": [
        [
          {
            "node": "AI ответ на команду",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "AI ответ на упоминание",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "AI генерация поста",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Упоминание бота?": {
      "main": [
        [
          {
            "node": "История чата",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "История чата": {
      "main": [
        [
          {
            "node": "Анализ упоминания",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Анализ упоминания": {
      "main": [
        [
          {
            "node": "AI ответ на упоминание",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI ответ на упоминание": {
      "main": [
        [
          {
            "node": "Отправить ответ на упоминание",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Получить запланированные посты": {
      "main": [
        [
          {
            "node": "AI генерация поста",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI генерация поста": {
      "main": [
        [
          {
            "node": "Отправить запланированный пост",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Роутинг команд": {
      "main": [
        [
          {
            "node": "Получить статистику пользователя",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Получить топ пользователей",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Генерация информационного ответа",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI ответ на команду",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Расписание": {
      "main": [
        [
          {
            "node": "Получить запланированные посты",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c0e7fe6e-0aa2-4a45-8cd2-40abcc9f0904",
  "meta": {
    "instanceId": "673dd365761c86615255caaaae908ad0f2b40ed6e6f64e1be5631254544e65ca"
  },
  "id": "jeTfRyDD9h7bZi7X",
  "tags": []
}
